{"componentChunkName":"component---src-templates-blog-post-js","path":"/docker/","result":{"data":{"site":{"siteMetadata":{"title":"凌羡"}},"markdownRemark":{"id":"d10cd153-8a64-5944-9713-cba62a6473e5","excerpt":"这篇文章是一篇发布web应用的实战文章，不会详细介绍docker原理、优缺点等。因为我刚开始学，还没有get到。 docker简介 docker是一个开源的应用容器引擎，可以为我们提供安全、可移植、可重复的自动化部署的方式。docker采用虚拟化的技术来虚拟化出应用程序的运行环境。如上图一样。docker…","html":"<blockquote>\n<p>这篇文章是一篇发布web应用的实战文章，不会详细介绍docker原理、优缺点等。因为我刚开始学，还没有get到。</p>\n</blockquote>\n<h2>docker简介</h2>\n<p>docker是一个开源的应用容器引擎，可以为我们提供安全、可移植、可重复的自动化部署的方式。docker采用虚拟化的技术来虚拟化出应用程序的运行环境。如上图一样。docker就像一艘轮船。而轮船上面的每个小箱子可以看成我们需要部署的一个个应用。使用docker可以充分利用服务器的系统资源，简化了自动化部署和运维的繁琐流程,减少很多因为开发环境中和生产环境中的不同引发的异常问题。从而提高生产力。\n  docker三个核心概念如下：</p>\n<ul>\n<li>镜像（images）：一个只读的模板，可以理解为应用程序的运行环境，包含了程序运行所依赖的环境和基本配置。相当于上图中的每个小箱子里面装的东西。</li>\n<li>仓库（repository）：一个用于存放镜像文件的仓库。可以看做和gitlab一样。</li>\n<li>容器（container）：一个运行应用程序的虚拟容器，他和镜像最大的区别在于容器的最上面那一层是可读可写的。 相当于上图中的每个小箱子里。</li>\n</ul>\n<h2>构建web应用</h2>\n<p>我们前端的web应用基本是单页应用，以我搭建博客为例子。我使用的是vuepress(一个很好的以vue为基础的工具)。\n在根目录创建一个<code class=\"language-text\">dockerfile</code>文件并搭配nginx。其配置如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">From</span> node<span class=\"token punctuation\">:</span>alpine\n\n<span class=\"token comment\"># 设置环境变量</span>\n<span class=\"token keyword\">ENV</span> NODE_ENV product\n\n<span class=\"token comment\"># 缓存node_modules</span>\n<span class=\"token keyword\">COPY</span> package*.json /app/\n\n<span class=\"token comment\"># 工作目录</span>\n<span class=\"token keyword\">WORKDIR</span> /app\n\n<span class=\"token comment\"># 安装依赖</span>\n<span class=\"token keyword\">RUN</span> npm install <span class=\"token punctuation\">-</span>registry=https<span class=\"token punctuation\">:</span>//registry.npm.taobao.org\n\n<span class=\"token comment\"># 拷贝源代码到工作目录</span>\n<span class=\"token keyword\">COPY</span> . /app\n\n<span class=\"token comment\"># 打包</span>\n<span class=\"token keyword\">RUN</span> npm run build\n\n<span class=\"token comment\"># 暴露端口</span>\n<span class=\"token keyword\">EXPOSE</span> 80\n\n<span class=\"token comment\"># 启动nginx，关闭守护式运行，否则容器启动后会立刻关闭</span>\n<span class=\"token keyword\">CMD</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"nginx\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-g\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"daemon off;\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"nginx\"><pre class=\"language-nginx\"><code class=\"language-nginx\"><span class=\"token keyword\">server</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">listen</span>      <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">server_name</span> localhost<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">location</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\"># web应用的内容</span>\n        <span class=\"token keyword\">root</span>    <span class=\"token operator\">/</span>app<span class=\"token operator\">/</span>docs<span class=\"token operator\">/</span><span class=\"token punctuation\">.</span>vuepress<span class=\"token operator\">/</span>dist<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">index</span>   <span class=\"token keyword\">index</span><span class=\"token punctuation\">.</span>html <span class=\"token keyword\">index</span><span class=\"token punctuation\">.</span>htm<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try_files</span>   <span class=\"token variable\">$uri</span> <span class=\"token variable\">$uri</span><span class=\"token operator\">/</span> <span class=\"token operator\">/</span><span class=\"token keyword\">index</span><span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">error_page</span>  <span class=\"token number\">500</span> <span class=\"token number\">502</span> <span class=\"token number\">503</span> <span class=\"token number\">504</span> <span class=\"token operator\">/</span><span class=\"token number\">50</span>x<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">location</span> <span class=\"token operator\">=</span> <span class=\"token operator\">/</span><span class=\"token number\">50</span>x<span class=\"token punctuation\">.</span>html <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">root</span>    <span class=\"token operator\">/</span>usr<span class=\"token operator\">/</span>share<span class=\"token operator\">/</span>nginx<span class=\"token operator\">/</span>html<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>构建镜像<br>\n<code class=\"language-text\">docker build -t hanxy/vuepress_blog .</code>,使用docker images就能看到如下：</p>\n<p><img src=\"../../static/docker-images.png\" alt=\"docker镜像\"></p>\n</li>\n</ul>\n<p>新建的镜像版本都是latest,这时我们若需要管理版本，则可以使用docker tag功能\n<code class=\"language-text\">docker tag imageId hanxy/vuepress_blog:v1.0</code>,镜像名称后面跟随的就是版本号</p>\n<ul>\n<li>\n<p>启动容器\n<code class=\"language-text\">docker run -d --name vuepress_blog -p 8080:80 hanxy/vuepress_blog</code>\n参数说明：</p>\n<ul>\n<li>-d</li>\n<li>—name给容器创建名称</li>\n<li>-p应用访问的端口对应docker暴露端口，-P对应的是随机端口</li>\n</ul>\n<p>创建完容器后，使用docker ps就可以看到正在运行的容器，此时打开页面<a href=\"http://localhost:8080%E5%B0%B1%E8%83%BD%E7%9C%8B%E5%88%B0%E6%88%91%E4%BB%AC%E6%9E%84%E5%BB%BA%E7%9A%84%E5%BA%94%E7%94%A8%E3%80%82\">http://localhost:8080就能看到我们构建的应用。</a>\n停止应用：docker stop containerId,启动容器docker start containerId</p>\n</li>\n<li>\n<p>创建自己的镜像并推送dockerhub\ndockerhub是一个类似npm的仓库管理工具，我们可以托管自己的镜像。例如我想要使用mysql这个镜像，我们使用docker search查找想要的镜像，使用docker pull拉去对用的镜像到本地，免去繁琐的mysql安装。我们推送自己的镜像也是很容易的：</p>\n<ol>\n<li>首先我们得创建自己的docker账号</li>\n<li>docker login输入自己的账号和密码</li>\n<li>docker push 用户名/容器名，比如我的上面的容器：hanxy/vuepress_blog</li>\n</ol>\n</li>\n<li>\n<p>发布阿里云服务器</p>\n<ol>\n<li>首先要在阿里云服务器上创建docker工具，安装方法大家自行搜索</li>\n<li>从自己的dockerhub上拉去镜像运行即可</li>\n</ol>\n</li>\n</ul>\n<h2>总结</h2>\n<p>以上我只是我刚入门到发布自己的博客的实践过程，内容是相当简陋，算是给大家入门介绍一点东西。docker还是比较深东西比较多，后续还有k8s这些，想要更深入了解还🉐️靠大家自己多摸索实践。</p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/84894157\">写给前端工程师看的Docker教程-实战篇</a></li>\n<li><a href=\"https://yq.aliyun.com/articles/336442\">阿里云CentOS 7上安装配置Docker</a></li>\n<li><a href=\"https://yeasy.gitbooks.io/docker_practice/install/centos.html\">Docker从入门到实战</a></li>\n</ul>","frontmatter":{"title":"从零开始学docker","date":"January 09, 2019","description":"从零使用docker构建一个web应用并发布到阿里云"}}},"pageContext":{"slug":"/docker/","previous":null,"next":{"fields":{"slug":"/typescript/"},"frontmatter":{"title":"Typescript踩坑笔记"}}}},"staticQueryHashes":["63159454","636771615"]}